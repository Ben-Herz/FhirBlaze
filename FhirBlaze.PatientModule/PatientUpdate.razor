
@using Microsoft.AspNetCore.Components.Forms
<EditForm Model="Patient" OnValidSubmit="updatePatient" class="form-horizontal">
    <DataAnnotationsValidator/>
    <ValidationSummary />
    <div class="row mb-3">
        <label for="patientId" class="col-sm-2 col-form-label">ID</label>
        <div class="col-sm-10">
            <InputText id="patientId" @bind-Value="Patient.PatientID" class="form-control" />
        </div>
   </div>

   <div class="row mb-6">
       <label for="firstName" class="col-sm-2 col-form-label">First</label>
       <div class="col-sm-6">
           <InputText id="firstName" @bind-Value="Patient.FirstName" class="form-control" />
       </div>
    </div>
    <div class="row mb-6">
       <label for="lastName" class="col-sm-2 col-form-label">Last</label>
       <div class="col-sm-6">
           <InputText id="lastName" @bind-Value="Patient.LastName" class="form-control" />
       </div>
    </div>
    <div class="row mb-6">
        <div class="col-sm-6">
        @if (Processing)
        {
            <button type="button" class="btn btn-primary-outline" disabled  >Processing</button>
        }
        else{
            <button type="submit" class="btn btn-primary">Save</button>
        }
        </div>
    </div>
</EditForm>

@code
{
    [Parameter]
    public EventCallback<Hl7.Fhir.Model.Patient> UpdatePatient { get; set; }

    [Parameter]
    public bool Processing { get; set; }

    [Parameter]
    public models.SimplePatient Patient { get; set; }

    protected async void updatePatient()
    {
        try
        {
            Console.WriteLine(Patient.PatientID);
            await UpdatePatient.InvokeAsync(Patient.ToHl7Patient());
        }
        catch (Exception)
        {
            // do nothing
        }
    }
}